<?xml version="1.0" encoding="utf-8"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009" 
		 xmlns:s="library://ns.adobe.com/flex/spark" 
		 xmlns:mx="library://ns.adobe.com/flex/mx"
		 creationComplete="init()" width="100%" height="100%" 
		 xmlns:parsley="http://www.spicefactory.org/parsley" 
		 xmlns:presentation="org.kdata.mobile.presentation.*" 
		 xmlns:binding="org.spicefactory.parsley.binding.*"
		 >
	<s:states>
		<s:State name="complete"/>
		<s:State name="Loading"/>
	</s:states>
	
	
	<fx:Metadata>
		[Event(name="changeIndex")]
	</fx:Metadata>
	
	
	<fx:Declarations>
		<parsley:Configure/>
		
	</fx:Declarations>
	
	
	<fx:Script>
		<![CDATA[
			import mx.collections.ArrayCollection;
			
			import spark.events.IndexChangeEvent;
			
			private var _dataProvider:ArrayCollection;		
			[Bindable]
			public var _itemRenderer:IFactory;
			
			[Inject] [Bindable]
			public var model:MainPresentationModel;
						
			private var _yDown:Number;
			private var _xDown:Number;
			private var _yUp:Number;
			private var _xUp:Number;
			
			private var num : int = 1;
			
			public static var CHANGE_INDEX : String="changeIndex";  
			
			Multitouch.inputMode = MultitouchInputMode.GESTURE;
			
			private function init():void
			{
/* 				addEventListener(MouseEvent.MOUSE_DOWN,mouseDown);
				addEventListener(MouseEvent.MOUSE_UP,mouseUp);
				addEventListener(MouseEvent.MOUSE_WHEEL,mouseWheel); */
				addEventListener(TransformGestureEvent.GESTURE_SWIPE,swipe);
			}
			
			// getter & setter
			public function get dataProvider():ArrayCollection
			{
				return _dataProvider;
			}
			
			public function set dataProvider(value:ArrayCollection):void
			{
				_dataProvider = value;
				list.dataProvider=dataProvider;
				list.selectedIndex=Math.floor(list.dataProvider.length/2);
			}
			
			public function set itemRenderer(value:IFactory):void
			{
				_itemRenderer = value;
			}
			
			// private function
			
			private function swipe(event:TransformGestureEvent):void
			{
				var step:Number;
				
				if (event.offsetY == 1) {
					step=-15;
				}
				else if (event.offsetY == -1) {
					step= +15;
				}
				
				var _selectedIndex:Number=list.selectedIndex;
				

					_selectedIndex+=step
					if(_selectedIndex<0)
						list.selectedIndex=0;
					else if(_selectedIndex>list.dataProvider.length-1)
						list.selectedIndex=list.dataProvider.length-1;
					else
						list.selectedIndex=_selectedIndex;
					this.dispatchEvent(new Event(CHANGE_INDEX));
				
			}
			
			private function mouseUp(e:MouseEvent):void
			{
				_yUp=e.stageY;
				_xUp=e.stageX;
				if(_xDown<15 || _xUp<15 )
				{
					return;
				}
				var _selectedIndex:Number=list.selectedIndex;
				var step:Number=Math.round((_yDown-_yUp)/25);
				if(step!=0)
				{
					_selectedIndex+=step
					if(_selectedIndex<0)
						list.selectedIndex=0;
					else if(_selectedIndex>list.dataProvider.length-1)
						list.selectedIndex=list.dataProvider.length-1;
					else
						list.selectedIndex=_selectedIndex;
					this.dispatchEvent(new Event(CHANGE_INDEX));
				}
			}
			
			private function mouseDown(e:MouseEvent):void
			{
				_yDown=e.stageY;
				_xDown=e.stageX;
			}
			private function mouseWheel(e:MouseEvent):void
			{
				var _selectedIndex:Number=list.selectedIndex;
				_selectedIndex-=e.delta;
				if(_selectedIndex<0)
					list.selectedIndex=0;
				else if(_selectedIndex>list.dataProvider.length-1)
					list.selectedIndex=list.dataProvider.length-1;
				else
					list.selectedIndex=_selectedIndex;
				this.dispatchEvent(new Event(CHANGE_INDEX));
			}
			
			private function listChangeIndex(e:IndexChangeEvent):void
			{
				CFLayout.index=e.newIndex;
				this.dispatchEvent(new Event(CHANGE_INDEX));
			}
			
			private function sliderChangeIndex(e:Event):void
			{
				list.selectedIndex=e.target.value;
				this.dispatchEvent(new Event(CHANGE_INDEX));
			}
			
			private function loadComplete():void
			{
				if (model.isLoading)
				{
					spinner.visible=false
					list.visible=true;
					model.isLoading=false;
				}
			}
			
			public function loading():void
			{
				spinner.visible=true
				list.visible=false;
			}
		]]>
	</fx:Script>
	
	
	<s:List id="list" change="listChangeIndex(event)"  height="100%" width="100%"
			itemRenderer="{_itemRenderer}" selectedIndex="{model.index}" visible="false" verticalScrollPolicy="off">
		<s:layout>
			<presentation:CoverFlowLayout id="CFLayout" index="{model.index}" loadComplete="loadComplete()" verticalScrollPosition="0"/>
		</s:layout>
	</s:List>
	
	<s:VGroup verticalAlign="middle" horizontalAlign="center" id="spinner" width="100%" height="100%" visible="true">
		<presentation:LoadingSpinner  size="150" numTicks="30" tickWidth="18"/>			
	</s:VGroup>
	<!--	
	<s:VSlider id="idxSlider" minimum="0" maximum="{list.dataProvider.length-1}"  left="5" bottom="20"
			   snapInterval="1" liveDragging="true" value="{model.index}"  rotation="180" change="sliderChangeIndex(event)" top="5"/>	
	-->
	<fx:Binding source="list.selectedIndex" destination="model.index" />
</s:Group>
